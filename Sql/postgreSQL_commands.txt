PostgreSQL :-->
It is a powerful, open-source object-relational database management system (ORDBMS).
It has a strong reputation for reliability, feature robustness, and performance. 

How to enter postgres terminal in terminal:- 
   command:  psql -U postgres


1)Creating and Managing Databases ---->

    Create a new database:-
        command: CREATE DATABASE <database_name>;

    List all databases:-
        command:  \l

    Connect to a database:-
        command: \c <database_name>

    DROP DATABASE mydatabase;
        command: DROP DATABASE <database_name>;


2)Creating and Managing Tables ---->

    Create a new table:-
        CREATE TABLE <table_name> (
          id SERIAL PRIMARY KEY,
          name VARCHAR(100),
          email VARCHAR(100) UNIQUE
        );

    List all tables:-
        command: \dt

    Describe a table (show table schema):-
        command: \d <table_name>

    Drop a table:-
        command: DROP TABLE <table_name>;


3)Inserting, Updating & Deleting Data ---->

    Insert data into a table:-
        command: INSERT INTO <table_name> (name, email) 
                 VALUES ('Nishchay', 'nishchay.gupta@berylsystems.com'),
                        ('Naman', 'naman.dua@berylsystems.com');
    
    Update data in a table:- 
        command: UPDATE <table_name> 
                 SET email = 'nishugupta123gupta@gmail.com' 
                 WHERE name = 'Nishchay';

    Delete data from a table:-
        command: DELETE FROM <table_name> 
                 WHERE name = 'Nishchay';


4)Constraints ----->

    UNIQUE:- It ensures that all values in a column are unique.
        command: CREATE TABLE <table_name> (
                    user_id INT PRIMARY KEY,
                    email VARCHAR(100) UNIQUE
                 );

    NOT NULL:- It ensures that a column cannot have a NULL value.
        command: CREATE TABLE <table_name> (
                    id INT NOT NULL,
                    first_name VARCHAR(50) NOT NULL,
                    last_name VARCHAR(50) NOT NULL
                 );

    DEFAULT:- It provides a default value for a column when none is specified.
        command: CREATE TABLE <table_name> (
                    id INT PRIMARY KEY,
                    name VARCHAR(100),
                    price DECIMAL(10, 2) DEFAULT 0.00
                 );

    PRIMARY KEY:- It uniquely identifies each record in a table. A primary key column cannot have NULL values and must contain unique values.
        command: CREATE TABLE <table_name> (
                    id INT PRIMARY KEY,
                    date DATE NOT NULL
                 );

    FOREIGN KEY:- It ensures the referential integrity of the data in one table to match values in another table.
        command: CREATE TABLE booking (
                    user_id INT , 
                    ticket_id INT, 
                    constraint fk_user FOREIGN KEY(user_id) REFERENCES users(user_id),
                    constraint fk_ticket FOREIGN KEY (ticket_id) REFERENCES ticket(ticket_id)
                 );

    CHECK:- It ensures that all values in a column satisfy a specific condition.
        command: CREATE TABLE users (
                    id INT PRIMARY KEY,
                    age INT CHECK (age >= 18)
                );


5)Alter Tables ---->

    Add a new column:-
        command: ALTER TABLE <table_name>
                 ADD <column_name> <datatype> <constraint>;

    Drop a column:- 
        command: ALTER TABLE <table_name>
                 DROP COLUMN <column_name>;

    Modify a column:-
        command: ALTER TABLE <table_name>
                 MODIFY COLUMN <column_name> <datatype> <constraint>;

    Rename a column:- 
        command: ALTER TABLE <table_name>
                 RENAME COLUMN <old_column_name> TO <new_column_name>;

    Rename a table:- 
        command: ALTER TABLE <old_table_name>
                 RENAME TO <new_table_name>;

    Adding constraint to table:-
        command: ALTER TABLE <table_name>
                 ADD CONSTRAINT <constraint_name> <constraint_type> <column_name>;

    Drop constraint from table:-
        command: ALTER TABLE <table_name>
                 DROP CONSTRAINT <constraint_name>;

    Changing column position:-
        command: ALTER TABLE <table_name>
                 MODIFY COLUMN <column_name> <datatype> <constraint> AFTER <another_column>;

    Enable constraint:-
        command: ALTER TABLE <table_name>
                 ENABLE CONSTRAINT <constraint_name>;

    Disable constraint:-
        command: ALTER TABLE <table_name>
                 DISABLE CONSTRAINT <constraint_name>;


6)Clauses ---->

    SELECT clause:-
        It is used to specify the columns to be returned in the query result.
        command: SELECT column1, column2 
                 FROM <table_name>;

    FROM clause:-
        It specifies the table or tables from which to retrieve the data.
        command: SELECT column1, column2 
                 FROM <table_name>;

    WHERE clause:-
        It filters the records to be returned based on specified conditions.
        command: SELECT column1, column2 
                 FROM <table_name> 
                 WHERE condition;

    INSERT clause:- 
        It adds new rows to a table.
        command: INSERT INTO <table_name> (column1, column2) 
                 VALUES (value1, value2);

    DELETE clause:-
        It removes rows from a table based on condition.
        command: DELETE FROM <table_name>
                 WHERE condition;
    
    UPDATE clause:-
        It modifies the existing rows in table based on condition.
        command: UPDATE table_name 
                 SET column1 = value1, column2 = value2 
                 WHERE condition;

    GROUP BY clause:-
        It group rows that have the same values in specified columns into summary rows.
        command: SELECT column1, COUNT(*) 
                 FROM <table_name>
                 GROUP BY column1;
    
    HAVING clause:-
        It filters groups based on specified conditions and used with GROUP BY clause.
        command: SELECT column1, COUNT(*) 
                 FROM <table_name> 
                 GROUP BY column1 
                 HAVING COUNT(*) > 1;
    
    ORDER BY clause:- 
        It sorts the result set in ascending or descending order.
        command: SELECT column1, column2 
                 FROM <table_name>
                 ORDER BY column1 ASC, column2 DESC;
    
    LIMIT clause:-
        It limits the number of rows returned by the query.
        command: SELECT column1, column2 
                 FROM <table_name>
                 LIMIT number_of_rows;
    
    OFFSET clause:-
        It skips a specified number of rows before beginning to return the rows.
        command: SELECT column1, column2 
                 FROM <table_name> 
                 OFFSET number_of_rows;

    UNION clause:-
        It combines the result sets of two or more SELECT statements, removing duplicates.
        command: SELECT column1 FROM table1
                 UNION
                 SELECT column1 FROM table2;

    UNION ALL Clause:-
        It combines the result sets of two or more SELECT statements, including duplicates.
        command: SELECT column1 FROM table1
                 UNION ALL
                 SELECT column1 FROM table2;
    
    EXCEPT clause:-
        It returns the result set of the first SELECT statement that do not appear in second SELECT statement.
        command: SELECT column1 FROM table1
                 EXCEPT
                 SELECT column1 FROM table2;

    INTERSECT clause:-
        It returns the result set that is intersection of result sets of two SELECT statements.
        command: SELECT column1 FROM table1
                 INTERSECT
                 SELECT column1 FROM table2;

7) Views ----->
    Views are virtual tables that are based on the result of a SELECT query. 
    They do not store data physically but allow us to look at the data stored in tables.
    
    Creating a View:-
        command: CREATE VIEW <view_name> AS
                 SELECT column1, column2, ...
                 FROM <table_name>
                 WHERE condition;

    Updating a View:-
        command: UPDATE <view_name>
                 SET age = 17
                 WHERE user_id = 1802;

    Deleting rows from View:-
        command: DELETE FROM <view_name>
                 WHERE condition;

    Droping a View:-
        command: DROP VIEW <view_name>;
