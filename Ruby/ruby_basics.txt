Ruby is a scripting language designed by Yukihiro Matsumoto, also known as Matz. 
It runs on a variety of platforms, such as Windows, Mac OS, and the various versions of UNIX.

* Ruby is a pure object-oriented programming language.
* Ruby is an open-source and is freely available on the Web, but it is subject to a license.
* Ruby is a general-purpose, interpreted programming language.
* Ruby is a server-side scripting language similar to Python and PERL.
* Ruby can be used to write Common Gateway Interface (CGI) scripts.
* Ruby can be embedded into Hypertext Markup Language (HTML).
* Ruby has a clean and easy syntax that allows a new developer to learn very quickly and easily.
* Ruby is very much scalable and big programs written in Ruby are easily maintainable.
* Ruby has similar syntax to that of many programming languages such as C++ and Perl.
* Ruby can be used for developing Internet and intranet applications.
* Ruby can be installed in Windows and POSIX environments.
* Ruby can easily be connected to DB2, MySQL, Oracle, and Sybase.
* Ruby has a rich set of built-in functions, which can be used directly into Ruby scripts.
* Ruby support many GUI tools such as Tcl/Tk, GTK, and OpenGL.


FEATURES OF RUBY:-
Ruby has many reasons for being popular and in demand. Few of the reasons are mentioned below:
 
1) The code written in Ruby is small, elegant and powerful as it has fewer number of lines of code.
2) Ruby allows simple and fast creation of Web application which results in less hard work.
3) As Ruby is free of charge that is Ruby is free to copy, use, modify, it allow programmers to make necessary changes as and when required.
4) Ruby is a dynamic programming language due to which there is no tough rules on how to built in features and it is very close to spoken languages.

# Ruby BEGIN Statement
   Declares code to be called before the program is run.
   Syntax:  BEGIN {
                code
            }

        Example:    puts "Hello, Nishchay Gupta." 
                    BEGIN {
                        puts "This is Ruby Learning!"
                    }  

        Output: This is Ruby Learning!
                Hello, Nishchay Gupta.



# Ruby END Statement
    Declares code to be called at the end of the program.   
    Syntax: END {
                code
            }

        Example:    puts "Hello, Nishchay Gupta." 
                    END {
                        puts "Completed Ruby Learning!"
                    }

        Output: Hello, Nishchay Gupta.
                Completed Ruby Learning!



# Ruby Comments
    A comment hides a line, part of a line, or several lines from the Ruby interpreter.

    SingleLined:   # I am a comment. Just ignore me.

    MultiLined:   =begin
                  This is a comment.
                  This is a comment, too.
                  This is a comment, too.
                  I said that already.
                  =end  
    


# Loops

    1) While Loop
        Executes code while conditional is true
        Syntax:
                while condition
                            code
                end

        example: 
                x = 4
                while x >= 1
                    puts "Nishchay Gupta"
                    x = x - 1
                end


    2) Do While Loop
        A while loop's conditional is separated from code by the reserved word do, a newline, backslash \, or a semicolon ;.
        Syntax:
                while conditional [do]
                    code
                end

            example: 
                    loop do
                       puts "Nishchay"
                       val = '7'
                       if val == '7'
                          break
                       end
                    end


    3) For Loop
        Executes code once for each element in expression.
        Syntax: 
                for variable [, variable ...] in expression [do]
                    code
                end
            
        example: 
                i = "Nishchay"
                for a in 1..5 do
                    puts i 
                end


    4) Until Loop
    Executes code while conditional is false.
    If an until modifier follows a begin statement with no rescue or ensure clauses, code is executed once before conditional is evaluated.
        Syntax:
                code until conditional
                        OR
                begin
                    code
                end until conditional

        example:    
                var = 7
                until var == 11 do
                    puts var * 10
                    var = var + 1
                end



# Variables
    There are different types of variables in Ruby:
				1) Local variables:
						- A local variable name always starts with a lowercase letter(a-z) or underscore (_). 
						- These variables are local to the code construct in which they are declared.
						- A local variable is only accessible within the block of its initialization. 
						- Local variables are not available outside the method. 
						- There is no need to initialize the local variables.
						Example: age = 10
										 _Age = 20

				2) Instance variables:
						- An instance variable name always starts with a @ sign. 
						- They are similar to Class variables but their values are local to specific instances of an object. 
						- Instance variables are available across methods for any specified instance or object i.e. instance variables can change from object to object.
						- There is no need to initialize the instance variables and uninitialized instance variable always contains a nil value.
						Example: 
							class Customer
   							def initialize(id, name, addr)
      						@cust_id = id
      						@cust_name = name
      						@cust_addr = addr
   							end
  						 def display_details()
      						puts "Customer id #@cust_id"
      						puts "Customer name #@cust_name"
      						puts "Customer address #@cust_addr"
   									end
								end

								cust1 = Customer.new("1", "John", "Wisdom Apartments, Ludhiya")
								cust2 = Customer.new("2", "Poul", "New Empire road, Khandala")

										cust1.display_details()
										cust2.display_details()

				3) Class variables:
						- A class variable name always starts with @@ sign.
						- It is available across different objects.
						- A class variable belongs to the class and it is a characteristic of a class. 
						- They need to be initialized before use.
						- Another way of thinking about class variables is as global variables within the context of a single class. 
						- A class variable is shared by all the descendants of the class. 
						- An uninitialized class variable will result in an error.
						Example: 
							class Customer 
								@@no_of_customers = 0

								def initialize(id, name, addr)  
									@cust_id = id 
									@cust_name = name 
									@cust_addr = addr 
								end
 
								def display_details() 
									puts "Customer id #@cust_id"
									puts "Customer name #@cust_name"
									puts "Customer address #@cust_addr"
								end

								def total_no_of_customers() 
									@@no_of_customers += 1
									puts "Total number of customers: #@@no_of_customers"
								end
							end

							cust1 = Customer.new("1", "John", "Wisdom Apartments, Ludhiya") 
							cust2 = Customer.new("2", "Poul", "New Empire road, Khandala") 

							cust1.display_details() 
							cust1.total_no_of_customers() 
							cust2.display_details() 
							cust2.total_no_of_customers() 


				4) Global variables :
						- A global variable name always starts with $. 
						- Class variables are not available across classes. 
						- If you want to have a single variable, which is available across classes, you need to define a global variable. 
						- Its scope is global, means it can be accessed from anywhere in a program. 
						- By default, an uninitialized global variable has a nil value and its use can cause the programs to be cryptic and complex.
						Example: 							
							$global_variable = 10
							class Class1 
								def print_global 
									puts "Global variable in Class1 is #$global_variable"
								end
							end
							class Class2 
								def print_global 
									puts "Global variable in Class2 is #$global_variable"
									end
								end
							class1obj = Class1.new
							class1obj.print_global 
							class2obj = Class2.new
							class2obj.print_global 

																																																																																																																																																																				