Ruby arrays are ordered, integer-indexed collections of any object. 
Each element in an array is associated with and referred to by an index.
Array indexing starts at 0, as in C or Java

# Creating Arrays
A new array can be created by using the literal constructor []. Arrays can contain different types of objects.
Example:
The array below contains an Integer, a String and a Float:
    ary = [1, "two", 3.0] 

There are many ways to create or initialize an array:-
*  One way is with the new class method
        names = Array.new

*  You can set the size of an array at the time of creating array 
        names = Array.new(20)

*  You can assign a value to each element in the array
        names = Array.new(4, "mac")

*  You can also use a block with new, populating each element with what the block evaluates 
        nums = Array.new(10) { |e| e = e * 2 }



AS WE SEE THERE ARE SO MANY WAYS , SO LETS DISCUSS ALL THE METHODS OF ARRAYS:-

# Array Methods:-

1. arr[0] 
   arr.at(0)
   arr.value_at()

These are used for accessing elements of array
Example:
arr = [1, 2, 3, 4]
puts arr[0]        # Output: 1
puts arr.at(0)     # Output: 1


2. arr.first
   arr.last

It gives the firts and last element of array
Example:
arr = [1, 2, 3, 4]
puts arr.first     # Output: 1
puts arr.last      # Output: 4


3. arr.take(n)

It gives the first n elements of array
Example:
arr = [1, 2, 3, 4]
puts arr.take(2)   # Output: [1, 2]


4. arr.drop(n)

It deletes the first n elements of the array
Example:
arr = [1, 2, 3, 4]
puts arr.drop(2)   # Output: [3, 4]


5. arr.count
   arr.length 
   arr.size

It gives the size of array
Example:
arr = [1, 2, 3, 4]
puts arr.count     # Output: 4
puts arr.length    # Output: 4
puts arr.size      # Output: 4


6. arr.empty?

It check whether array contains elements or not
Example;
arr = []
puts arr.empty?    # Output: true


7. arr.inlude?()

It check whether the particular element is present or not
Example:
arr = [1, 2, 3, 4]
puts arr.include?(2)  # Output: true


8. arr.push()
   arr<<
   arr.append

It put the element at the last of the array
Example:
arr = [1, 2, 3]
arr.push(4)
arr << 5
arr.append(6)
puts arr           # Output: [1, 2, 3, 4, 5, 6]


9. arr.unshift

It insert the element at the begining of the array
Example;
arr = [2, 3, 4]
arr.unshift(1)
puts arr           # Output: [1, 2, 3, 4]


10. arr.insert(index, '')

It insert the element at the given index
Example:
arr = [1, 2, 4, 5]
arr.insert(2, 3)
puts arr           # Output: [1, 2, 3, 4, 5]


11. arr.pop

It removes the last element of the array and returns it
Example:
arr = [1, 2, 3, 4]
arr.pop
puts arr           # Output: [1, 2, 3]


12. arr.delete_at()
It delete element at particular index
Example:
arr = [1, 2, 3, 4]
arr.delete_at(2)
puts arr           # Output: [1, 2, 4]


13. arr.shift

It permanently remove the first element of the array and returns it
Example:
arr = [1, 2, 3, 4]
arr.shift
puts arr           # Output: [2, 3, 4]


14. arr.uniq

It remove the duplicate eleement from the array
Example:
arr = [1, 2, 2, 3, 3, 4]
arr.uniq!
puts arr           # Output: [1, 2, 3, 4]


15. arr.reverse

It reverse the array
Example:
arr = [1, 2, 3, 4]
arr.reverse!
puts arr           # Output: [4, 3, 2, 1]


16. arr.each {|a| print a___,""}

It print the array according to the operation
Example:
arr = [1, 2, 3, 4]
arr.each {|a| print a, " "}
# Output: 1 2 3 4


17. arr.select{|a| cond} / arr.keep_if{}

It select elements according to the condition
Example:
arr = [1, 2, 3, 4]
selected = arr.select {|a| a.even?}
puts selected      # Output: [2, 4]

arr.keep_if {|a| a.even?}
puts arr           # Output: [2, 4]


18. arr.reject{|a| cond} / arr.delete_if{}

It reject elements according to the condition
Example:
arr = [1, 2, 3, 4]
rejected = arr.reject {|a| a.even?}
puts rejected      # Output: [1, 3]

arr.delete_if {|a| a.even?}
puts arr           # Output: [1, 3]


19. arr.index, arr.find_index

It gives the index of the particular element
Example:
arr = [1, 2, 3, 4]
puts arr.index(3)  # Output: 2


20. arr.max, arr.min

It gives the maximum and minumum values among all elements of array
Example:
arr = [1, 2, 3, 4]
puts arr.max       # Output: 4
puts arr.min       # Output: 1


21. arr.sample 

It gives one or more random elements
Example:
arr = [1, 2, 3, 4]
puts arr.sample    # Output: random element from arr


22. arr.shuffle

It return elements in random order
Example:
arr = [1, 2, 3, 4]
puts arr.shuffle   # Output: elements in random order


23. arr.intersection()

It returns the common elements found in the given arrays
Example:
arr1 = [1, 2, 3]
arr2 = [2, 3, 4]
puts arr1 & arr2   # Output: [2, 3]


24. arr.union() 
    arr.concat()

It combines the elements of given arrays
Example:
arr1 = [1, 2, 3]
arr2 = [4, 5, 6]
puts arr1 | arr2        # Output: [1, 2, 3, 4, 5, 6]
puts arr1.concat(arr2)  # Output: [1, 2, 3, 4, 5, 6]


25. arr.difference()

It returns the elements from self array which are not present in given array
Example:
arr1 = [1, 2, 3, 4]
arr2 = [2, 3]
puts arr1 - arr2   # Output: [1, 4]


26. arr.inspect
    arr.to_s

It converts the elements of the array to string
Example:
arr = [1, 2, 3]
puts arr.inspect   # Output: "[1, 2, 3]"
puts arr.to_s      # Output: "1, 2, 3"


27. arr.to_a

It returns a new array containing all its elements
Example:
arr = [1, 2, 3]
puts arr.to_a      # Output: [1, 2, 3]


28. arr.to_h

It returns a new hash formed from the elements
Example:
arr = [[:key1, 'value1'], [:key2, 'value2']]
hash = arr.to_h
puts hash          # Output: {:key1=>"value1", :key2=>"value2"}


29. arr.delete()

It delete the specific element
Example:
arr = [1, 2, 3, 4]
arr.delete(3)
puts arr           # Output: [1, 2, 4]


30. arr.join()

It join the elements of the array with the specific parameter
Example:
arr = [1, 2, 3]
puts arr.join(", ")# Output: "1, 2, 3"


31. arr.map{}

It iterates over each element of array and perform action on them
Example:
arr = [1, 2, 3]
mapped = arr.map {|a| a * 2}
puts mapped        # Output: [2, 4, 6]


32. arr.compact

It Remove nil elements from the array.
Example;
arr = [1, nil, 2, nil, 3]
arr.compact!
puts arr           # Output: [1, 2, 3]


33. arr.flatten

It converts a nested array into a single array.
Example:
arr = [1, [2, 3], [4, [5, 6]]]
arr.flatten!
puts arr           # Output: [1, 2, 3, 4, 5, 6]


34. arr.fill

It fill the array with a specified value.
Example:
arr = [1, 2, 3, 4]
arr.fill(0)
puts arr           # Output: [0, 0, 0, 0]


35. arr.zip

It Combine elements from multiple arrays into an array of arrays.
Example:
arr1 = [1, 2, 3]
arr2 = [4, 5, 6]
puts arr1.zip(arr2)  # Output: [[1, 4], [2, 5], [3, 6]]


36. arr.rotate

It rotate the elements of the array.
Example:
arr = [1, 2, 3, 4]
puts arr.rotate     # Output: [2, 3, 4, 1]
puts arr.rotate(2)  # Output: [3, 4, 1, 2]


37. arr.bsearch

It use binary search to find a specific element.
Example:
arr = [1, 2, 3, 4, 5, 6]
puts arr.bsearch {|x| x >= 4}  # Output: 4


38. arr.sort

It sort the elements of the array.
Example:
arr = [3, 1, 4, 2]
puts arr.sort       # Output: [1, 2, 3, 4]


39. arr.cycle(n)

It Iterate over the array n times.
Example:
arr = [1, 2, 3]
arr.cycle(2) {|x| puts x}
# Output: 1 2 3 1 2 3


40. arr.drop_while

Remove elements while the condition is true, and stop when it becomes false.
Example:
arr = [1, 2, 3, 4, 5]
puts arr.drop_while {|x| x < 3}  # Output: [3, 4, 5]


41. arr.sort_by(& )

It sort the elements by a specified method.
Example:
arr = ["apple", "pear", "banana"]
puts arr.sort_by(&:length)  # Output: ["pear", "apple", "banana"]


42. arr.transpose

It transpose the rows and columns of an array.
Example:
arr = [[1, 2], [3, 4], [5, 6]]
puts arr.transpose  # Output: [[1, 3, 5], [2, 4, 6]]


43. arr.slice(index, length)

It remove a subarray starting at index and continuing for length elements.
Example:
arr = [1, 2, 3, 4, 5]
puts arr.slice!(1, 3) # Output: [2, 3, 4]
puts arr              # Output: [1, 5]


44. arr.fetch(index, default)

It retrieve an element by index, returning a default value if the index is out of bounds.
Example:
arr = [1, 2, 3]
puts arr.fetch(5, 'not found')   # Output: not found


45. arr.permutation(n)

It return all permutations of n elements.
Example:
arr = [1, 2, 3]
puts arr.permutation(2).to_a   # Output: [[1, 2], [1, 3], [2, 1], [2, 3], [3, 1], [3, 2]]
